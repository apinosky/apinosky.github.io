I"<p>In the first quarter of my graduate program, I took a machine dynamics course, which focused on Lagrangian Mechanics, with all major coding assignments programmed in Python. This page highlights the final project completed at the end of the course.</p>

<h1 id="goals-of-the-project">Goals of the Project</h1>

<p>For this project, the goal was to develop a planar simulation with:</p>
<ol>
  <li>2 to 5 degrees of freedom</li>
  <li>rotational inertia in the dynamics</li>
  <li>impacts of some sort</li>
  <li>external forcing of some sort</li>
  <li>an animation of the resulting simulation to show that it “works”</li>
</ol>

<h1 id="proposal">Proposal</h1>

<p>For my final project, I decided to simulate a planar version of horseshoes. To make the game planar, the horseshoe was thrown like a frisbee. This required a 1 DOF “launcher” to will release the horseshoe at a fixed condition. The “launcher” applied an angular acceleration to the horseshoe prior to release. After release, the horseshoe “flew freely” until it impacted the stake. The stake was be represented as a triangle.</p>

<h1 id="actual-simulation">Actual Simulation</h1>

<p>To make the simulation work, I ended up simplifying the launcher to be an applied force to x and theta for a fixed duration (0.2s).</p>

<h1 id="system-drawings">System Drawings</h1>

<p><em>A sketch of the overall system is shown in the figure below:</em></p>

<p style="text-align: center;"><img src="/assets/images/horseshoes_slide1.PNG" alt="Planar Horseshoes" /></p>

<p><em>The rigid body transformations are shown in the figure below:</em></p>

<p style="text-align: center;"><img src="/assets/images/horseshoes_slide2.PNG" alt="Rigid Body Transformations" /></p>

<p><em>The impact updates are shown in the figure below:</em></p>

<p style="text-align: center;"><img src="/assets/images/horseshoes_slide3.PNG" alt="Impacts" /></p>

<h1 id="final-simulation">Final Simulation</h1>

<p>The Euler-Lagrange Equations are calculated for two different conditions:</p>

<ol>
  <li>When the launcher is applying a force (Forced E-L Equations)</li>
  <li>After the horseshoe leaves the launcher</li>
</ol>

<ul>
  <li>The impact constraints and impact updates are described in the figure above. These are solved for numerically during the simulation</li>
  <li>The simulation also checks for impacts between vertices of the horseshoe and the sides of the stake (not explicitly listed in the figure above)</li>
</ul>

<p>The animation plays back several different start angles for throwing horseshoes. The animation definitely appears to have the correct behavior for the outside of the horseshoe. I wasn’t able to fully debug the internal horseshoe collisions, but it appears to also be working properly by examining the animation.</p>

<p>The code and animation can be viewed on the following google colab document: <a href="https://colab.research.google.com/drive/15mrL_8np_BqLTyWcCcnX4Lx1PdBehYtS?usp=sharing">https://colab.research.google.com/drive/15mrL_8np_BqLTyWcCcnX4Lx1PdBehYtS?usp=sharing</a></p>
:ET